Settings:
  Output files: "/flush3/sam079/RNAseq-POMV/GenomeIndex/Bowtie_SalmonISAV/SalmonISAV.*.bt2"
  Line rate: 6 (line is 64 bytes)
  Lines per side: 1 (side is 64 bytes)
  Offset rate: 4 (one in 16)
  FTable chars: 10
  Strings: unpacked
  Max bucket size: default
  Max bucket size, sqrt multiplier: default
  Max bucket size, len divisor: 4
  Difference-cover sample period: 1024
  Endianness: little
  Actual local endianness: little
  Sanity checking: disabled
  Assertions: disabled
  Random seed: 0
  Sizeofs: void*:8, int:4, long:8, size_t:8
Input files DNA, FASTA:
  /OSM/CBR/AF_POMV/work/POMV_RNA_seq/Genomes/SalmonISAV.fa
Building a SMALL index
Reading reference sizes
  Time reading reference sizes: 00:00:03
Calculating joined length
Writing header
Reserving space for joined string
Joining reference sequences
  Time to join reference sequences: 00:00:01
bmax according to bmaxDivN setting: 88805988
Using parameters --bmax 66604491 --dcv 1024
  Doing ahead-of-time memory usage test
  Passed!  Constructing with these parameters: --bmax 66604491 --dcv 1024
Constructing suffix-array element generator
Building DifferenceCoverSample
  Building sPrime
  Building sPrimeOrder
  V-Sorting samples
  V-Sorting samples time: 00:00:07
  Allocating rank array
  Ranking v-sort output
  Ranking v-sort output time: 00:00:03
  Invoking Larsson-Sadakane on ranks
  Invoking Larsson-Sadakane on ranks time: 00:00:02
  Sanity-checking and returning
Building samples
Reserving space for 12 sample suffixes
Generating random suffixes
QSorting 12 sample offsets, eliminating duplicates
QSorting sample offsets, eliminating duplicates time: 00:00:00
Multikey QSorting 12 samples
  (Using difference cover)
  Multikey QSorting samples time: 00:00:00
Calculating bucket sizes
Splitting and merging
  Splitting and merging time: 00:00:00
Split 1, merged 6; iterating...
Splitting and merging
  Splitting and merging time: 00:00:00
Avg bucket size: 4.4403e+07 (target: 66604490)
Converting suffix-array elements to index image
Allocating ftab, absorbFtab
Entering Ebwt loop
Getting block 1 of 8
  Reserving size (66604491) for bucket 1
Getting block 2 of 8
  Reserving size (66604491) for bucket 2
  Calculating Z arrays for bucket 1
Getting block 3 of 8
  Entering block accumulator loop for bucket 1:
  Reserving size (66604491) for bucket 3
Getting block 4 of 8
  Reserving size (66604491) for bucket 4
  Calculating Z arrays for bucket 2
  Calculating Z arrays for bucket 3
  Entering block accumulator loop for bucket 3:
Getting block 5 of 8
  Calculating Z arrays for bucket 4
  Entering block accumulator loop for bucket 2:
  Reserving size (66604491) for bucket 5
  Entering block accumulator loop for bucket 4:
Getting block 6 of 8
  Calculating Z arrays for bucket 5
  Reserving size (66604491) for bucket 6
Getting block 7 of 8
  Reserving size (66604491) for bucket 7
Getting block 8 of 8
  Reserving size (66604491) for bucket 8
  Calculating Z arrays for bucket 6
  Entering block accumulator loop for bucket 5:
  Calculating Z arrays for bucket 7
  Entering block accumulator loop for bucket 7:
  Entering block accumulator loop for bucket 6:
  Calculating Z arrays for bucket 8
  Entering block accumulator loop for bucket 8:
  bucket 8: 10%
  bucket 1: 10%
  bucket 7: 10%
  bucket 2: 10%
  bucket 5: 10%
  bucket 3: 10%
  bucket 4: 10%
  bucket 6: 10%
  bucket 8: 20%
  bucket 1: 20%
  bucket 7: 20%
  bucket 2: 20%
  bucket 8: 30%
  bucket 5: 20%
  bucket 3: 20%
  bucket 4: 20%
  bucket 6: 20%
  bucket 1: 30%
  bucket 8: 40%
  bucket 7: 30%
  bucket 2: 30%
  bucket 5: 30%
  bucket 8: 50%
  bucket 1: 40%
  bucket 3: 30%
  bucket 7: 40%
  bucket 4: 30%
  bucket 6: 30%
  bucket 2: 40%
  bucket 8: 60%
  bucket 1: 50%
  bucket 5: 40%
  bucket 7: 50%
  bucket 8: 70%
  bucket 3: 40%
  bucket 2: 50%
  bucket 4: 40%
  bucket 6: 40%
  bucket 1: 60%
  bucket 8: 80%
  bucket 7: 60%
  bucket 5: 50%
  bucket 2: 60%
  bucket 3: 50%
  bucket 8: 90%
  bucket 1: 70%
  bucket 4: 50%
  bucket 7: 70%
  bucket 6: 50%
  bucket 5: 60%
  bucket 8: 100%
  Sorting block of length 66176903 for bucket 8
  (Using difference cover)
  bucket 2: 70%
  bucket 1: 80%
  bucket 3: 60%
  bucket 7: 80%
  bucket 4: 60%
  bucket 6: 60%
  bucket 2: 80%
  bucket 5: 70%
  bucket 1: 90%
  bucket 7: 90%
  bucket 3: 70%
  bucket 2: 90%
  bucket 4: 70%
  bucket 1: 100%
  Sorting block of length 64117011 for bucket 1
  (Using difference cover)
  bucket 6: 70%
  bucket 5: 80%
  bucket 7: 100%
  Sorting block of length 5738295 for bucket 7
  (Using difference cover)
  bucket 3: 80%
  bucket 2: 100%
  Sorting block of length 28514217 for bucket 2
  (Using difference cover)
  bucket 4: 80%
  bucket 5: 90%
  bucket 6: 80%
  bucket 3: 90%
  bucket 5: 100%
  Sorting block of length 11054844 for bucket 5
  (Using difference cover)
  bucket 4: 90%
  bucket 6: 90%
  bucket 3: 100%
  Sorting block of length 59618977 for bucket 3
  (Using difference cover)
  bucket 4: 100%
  Sorting block of length 58972181 for bucket 4
  (Using difference cover)
  bucket 6: 100%
  Sorting block of length 61031518 for bucket 6
  (Using difference cover)
  Sorting block time: 00:00:14
Returning block of 5738296 for bucket 7
  Sorting block time: 00:00:32
Returning block of 11054845 for bucket 5
  Sorting block time: 00:01:15
Returning block of 28514218 for bucket 2
  Sorting block time: 00:02:44
Returning block of 58972182 for bucket 4
  Sorting block time: 00:02:45
Returning block of 61031519 for bucket 6
  Sorting block time: 00:02:49
Returning block of 59618978 for bucket 3
  Sorting block time: 00:02:52
Returning block of 66176904 for bucket 8
  Sorting block time: 00:02:53
Returning block of 64117012 for bucket 1
Exited Ebwt loop
fchr[A]: 0
fchr[C]: 94855188
fchr[G]: 181805559
fchr[T]: 269910864
fchr[$]: 355223953
Exiting Ebwt::buildToDisk()
Returning from initFromVector
Wrote 136409368 bytes to primary EBWT file: /flush3/sam079/RNAseq-POMV/GenomeIndex/Bowtie_SalmonISAV/SalmonISAV.1.bt2
Wrote 88805996 bytes to secondary EBWT file: /flush3/sam079/RNAseq-POMV/GenomeIndex/Bowtie_SalmonISAV/SalmonISAV.2.bt2
Re-opening _in1 and _in2 as input streams
Returning from Ebwt constructor
Headers:
    len: 355223953
    bwtLen: 355223954
    sz: 88805989
    bwtSz: 88805989
    lineRate: 6
    offRate: 4
    offMask: 0xfffffff0
    ftabChars: 10
    eftabLen: 20
    eftabSz: 80
    ftabLen: 1048577
    ftabSz: 4194308
    offsLen: 22201498
    offsSz: 88805992
    lineSz: 64
    sideSz: 64
    sideBwtSz: 48
    sideBwtLen: 192
    numSides: 1850125
    numLines: 1850125
    ebwtTotLen: 118408000
    ebwtTotSz: 118408000
    color: 0
    reverse: 0
Total time for call to driver() for forward index: 00:03:45
Reading reference sizes
  Time reading reference sizes: 00:00:02
Calculating joined length
Writing header
Reserving space for joined string
Joining reference sequences
  Time to join reference sequences: 00:00:01
  Time to reverse reference sequence: 00:00:00
bmax according to bmaxDivN setting: 88805988
Using parameters --bmax 66604491 --dcv 1024
  Doing ahead-of-time memory usage test
  Passed!  Constructing with these parameters: --bmax 66604491 --dcv 1024
Constructing suffix-array element generator
Building DifferenceCoverSample
  Building sPrime
  Building sPrimeOrder
  V-Sorting samples
  V-Sorting samples time: 00:00:06
  Allocating rank array
  Ranking v-sort output
  Ranking v-sort output time: 00:00:03
  Invoking Larsson-Sadakane on ranks
  Invoking Larsson-Sadakane on ranks time: 00:00:02
  Sanity-checking and returning
Building samples
Reserving space for 12 sample suffixes
Generating random suffixes
QSorting 12 sample offsets, eliminating duplicates
QSorting sample offsets, eliminating duplicates time: 00:00:00
Multikey QSorting 12 samples
  (Using difference cover)
  Multikey QSorting samples time: 00:00:00
Calculating bucket sizes
Splitting and merging
  Splitting and merging time: 00:00:00
Split 1, merged 6; iterating...
Splitting and merging
  Splitting and merging time: 00:00:00
Avg bucket size: 5.07463e+07 (target: 66604490)
Converting suffix-array elements to index image
Allocating ftab, absorbFtab
Entering Ebwt loop
Getting block 1 of 7
Getting block 2 of 7
  Reserving size (66604491) for bucket 2
  Reserving size (66604491) for bucket 1
Getting block 3 of 7
  Reserving size (66604491) for bucket 3
Getting block 4 of 7
  Reserving size (66604491) for bucket 4
  Calculating Z arrays for bucket 1
Getting block 5 of 7
  Entering block accumulator loop for bucket 1:
  Reserving size (66604491) for bucket 5
  Calculating Z arrays for bucket 2
  Entering block accumulator loop for bucket 2:
  Calculating Z arrays for bucket 3
  Calculating Z arrays for bucket 5
  Calculating Z arrays for bucket 4
  Entering block accumulator loop for bucket 3:
  Entering block accumulator loop for bucket 5:
  Entering block accumulator loop for bucket 4:
Getting block 6 of 7
  Reserving size (66604491) for bucket 6
Getting block 7 of 7
  Reserving size (66604491) for bucket 7
  Calculating Z arrays for bucket 6
  Entering block accumulator loop for bucket 6:
  Calculating Z arrays for bucket 7
  Entering block accumulator loop for bucket 7:
  bucket 7: 10%
  bucket 1: 10%
  bucket 5: 10%
  bucket 3: 10%
  bucket 2: 10%
  bucket 7: 20%
  bucket 1: 20%
  bucket 6: 10%
  bucket 4: 10%
  bucket 5: 20%
  bucket 7: 30%
  bucket 1: 30%
  bucket 3: 20%
  bucket 2: 20%
  bucket 7: 40%
  bucket 1: 40%
  bucket 5: 30%
  bucket 6: 20%
  bucket 3: 30%
  bucket 7: 50%
  bucket 2: 30%
  bucket 4: 20%
  bucket 1: 50%
  bucket 7: 60%
  bucket 5: 40%
  bucket 1: 60%
  bucket 3: 40%
  bucket 2: 40%
  bucket 6: 30%
  bucket 7: 70%
  bucket 1: 70%
  bucket 5: 50%
  bucket 4: 30%
  bucket 7: 80%
  bucket 3: 50%
  bucket 2: 50%
  bucket 1: 80%
  bucket 7: 90%
  bucket 5: 60%
  bucket 6: 40%
  bucket 1: 90%
  bucket 3: 60%
  bucket 7: 100%
  Sorting block of length 41910650 for bucket 7
  (Using difference cover)
  bucket 2: 60%
  bucket 5: 70%
  bucket 4: 40%
  bucket 1: 100%
  Sorting block of length 50809473 for bucket 1
  (Using difference cover)
  bucket 6: 50%
  bucket 3: 70%
  bucket 2: 70%
  bucket 5: 80%
  bucket 6: 60%
  bucket 4: 50%
  bucket 2: 80%
  bucket 3: 80%
  bucket 5: 90%
  bucket 2: 90%
  bucket 6: 70%
  bucket 3: 90%
  bucket 5: 100%
  Sorting block of length 41760837 for bucket 5
  (Using difference cover)
  bucket 4: 60%
  bucket 2: 100%
  Sorting block of length 45876958 for bucket 2
  (Using difference cover)
  bucket 3: 100%
  Sorting block of length 59007476 for bucket 3
  (Using difference cover)
  bucket 6: 80%
  bucket 4: 70%
  bucket 6: 90%
  bucket 4: 80%
  bucket 6: 100%
  Sorting block of length 63150472 for bucket 6
  (Using difference cover)
  bucket 4: 90%
  bucket 4: 100%
  Sorting block of length 52708081 for bucket 4
  (Using difference cover)
  Sorting block time: 00:01:50
Returning block of 41910651 for bucket 7
  Sorting block time: 00:01:54
Returning block of 41760838 for bucket 5
  Sorting block time: 00:02:03
Returning block of 45876959 for bucket 2
  Sorting block time: 00:02:18
Returning block of 50809474 for bucket 1
  Sorting block time: 00:02:25
Returning block of 52708082 for bucket 4
  Sorting block time: 00:02:44
Returning block of 59007477 for bucket 3
  Sorting block time: 00:02:48
Returning block of 63150473 for bucket 6
Exited Ebwt loop
fchr[A]: 0
fchr[C]: 94855188
fchr[G]: 181805559
fchr[T]: 269910864
fchr[$]: 355223953
Exiting Ebwt::buildToDisk()
Returning from initFromVector
Wrote 136409368 bytes to primary EBWT file: /flush3/sam079/RNAseq-POMV/GenomeIndex/Bowtie_SalmonISAV/SalmonISAV.rev.1.bt2
Wrote 88805996 bytes to secondary EBWT file: /flush3/sam079/RNAseq-POMV/GenomeIndex/Bowtie_SalmonISAV/SalmonISAV.rev.2.bt2
Re-opening _in1 and _in2 as input streams
Returning from Ebwt constructor
Headers:
    len: 355223953
    bwtLen: 355223954
    sz: 88805989
    bwtSz: 88805989
    lineRate: 6
    offRate: 4
    offMask: 0xfffffff0
    ftabChars: 10
    eftabLen: 20
    eftabSz: 80
    ftabLen: 1048577
    ftabSz: 4194308
    offsLen: 22201498
    offsSz: 88805992
    lineSz: 64
    sideSz: 64
    sideBwtSz: 48
    sideBwtLen: 192
    numSides: 1850125
    numLines: 1850125
    ebwtTotLen: 118408000
    ebwtTotSz: 118408000
    color: 0
    reverse: 1
Total time for backward call to driver() for mirror index: 00:03:30
